pragma cashscript ^0.6.3;

/**
 * @param: payerPkh: Payer's PubKeyHash.
 * @param: payeeLockScript: P2PKH or P2SH hash.
 * @param: expiration: Blockheight after which the the contract becomes obsolete.
 * @param: epoch: Each epoch represents a timeframe, eg: epoch = 1 is 1 block.
 * @param: maxAmountPerEpoch: Max amount allowed to be spend by payee per epoch.
 * @param: validFrom: The blockheight/time of contract/state creation.
 *
 */
contract Agreement(
        bytes20 payerPkh,
        bytes payeeLockScript,
        bytes4 expiration,
        bytes4 epoch,
        bytes4 maxAmountPerEpoch,
        bytes4 validFrom
    ){

    /*
    * Can only be used by the payer.
    * @param: pk: signature of payerPk.
    * @param: s: signature of payerPk.
    */
    function revoke(
        pubkey pk,
        sig s
    ){
        // Make sure that it's the payer who signs and revokes the funds.
        require(hash160(pk) == payerPkh);
        require(checkSig(s, pk));
    }

    /**
     * Can only be used by anyone by can only be paid to payee.
     * @param: pk: Public Key or either Payer, Payee or third party making the transaction as the funds can only be received by the Payee because of covenants.
     * @param: s: signature that matches the public key.
     * @param: amountToNextState: Amount sent should be greater than 546 i.e the dust limit
     * otherwise the next state of contract will not be spendable by payee. Need more funds.
     * @param: amount: Amount to be sent to the payeeLockScript
     *
     * Note: It's the responsibility of the payee to calculate the miner fee when making a transaction.
     * Hence, amountToNextState = inputValue - amount - minerfee
     */
    function spend(
        pubkey pk,
        sig s,
        int amountToNextState,
        int amount,
    ){
        // Only necessary castings are used to reduce size. All other casting which either increase
        // the number of operations or keep the size same are ignored.

        // Check for a valid signature.
        require(checkSig(s, pk));

        // After the contract is initiated the value of maxAmountPerEpoch is never changed, hence it's checking is not included in the contract's code.
        // At the time of creating the contract, payer and payee must make sure that value of sameMaxAmountPerEpoch is >= 546 and less than 4 byte integer limit i.e ~ 21 BCH or 2,147,483,647;
        // require(sameMaxAmountPerEpoch >= 546);

        // Make sure that the amount being spent is greater than 546 and less than maxAmountPerEpoch.
        require(within(amount, 546, int(maxAmountPerEpoch) + 1));

        // Each transaction rewrites the validFrom variable because it's the locktime of the transaction.
        // passedTime is the number of blocks passed after the last transaction was done and is used to calculate the remainingTime.
        int passedTime = int(tx.locktime) - int(validFrom);
        require(passedTime >= 0);
        
        // Require that the locktime of the transaction is less than the expiration.
        // After expiration the contract will only be spendable by the Payer.
        require(int(tx.locktime) <= int(expiration));

        // Create a new contract with timelock as the current block height or provided locktime during contract building.
        // Note that the constructor parameters are added in the reverse order.
        // So validFrom is actually the first statement in the contract bytecode.
        bytes nextState = 0x04 + tx.locktime + tx.bytecode.split(5)[1];

        // Create a simulated state(Helps in enforcing spendable restrictions) by sending the money to the new contract state.
        bytes toPayee = bytes8(amount) + payeeLockScript;
        bytes32 toContract = new OutputP2SH(bytes8(amountToNextState), hash160(nextState));

        require(hash256(toPayee + toContract) == tx.hashOutputs);
    }
}