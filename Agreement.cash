pragma cashscript ^0.6.3;

/**
 * @param: payerPk: Pubkey of the payer.
 * @param: payeePk: Pubkey of the payee.
 * @param: epoch: Each epoch represents a timeframe, epoch = 1 is 1 block.
 * @param: maxAmountPerEpoch: Max amount allowed to be spend by payee per epoch.
 * @param: remainingTime: The remaining time after which a new epoch will start.
 * @param: remaningAmount: Remaining amount that can be withdrawan from the contract by payee before next epoch starts.
 * @param: validFrom: The blockheight/time of contract/state creation.
 */
contract Agreement(
        pubkey payerPk,
        pubkey payeePk,
        bytes4 epoch,
        bytes4 maxAmountPerEpoch,
        bytes4 remainingTime,
        bytes4 remainingAmount,
        bytes4 validFrom)
    {

    /*
    * Can only be used by the payer.
    * @param: payerSig: signature of payerPk.
    */
    function revoke(sig payerSig){
        require(checkSig(payerSig, payerPk));
    }

    /**
     * Can only be used by payee.
     * @param: payeeSig: signature of the payee.
     * @param: amountToNextState: Amount sent should be greater than 546 i.e the dust limit
     * otherwise the next state of contract will not be spendable by payee. Need more funds.
     * @param: amount: Amount to be sent to the payeePkh
     */
    function spend(
        sig payeeSig,
        int amountToNextState,
        int amount,
    ) {
        // Check payee's signatures.
        require(checkSig(payeeSig, payeePk));

        // Only necessary casting used to reduce size. All other casting which either increase
        // the number of operations or keep the size same are ignored.
        int sameMaxAmountPerEpoch = int(maxAmountPerEpoch);
        require(sameMaxAmountPerEpoch >= 546);
        require(within(amount, 546, sameMaxAmountPerEpoch + 1));

        int sameEpoch = int(epoch);
        require(sameEpoch >= 0);

        require(tx.time >= int(validFrom));
        int passedTime = int(tx.locktime) - int(validFrom);
        require(passedTime >= 0);

        int newRemainingTime = int(remainingTime);
        require(within(newRemainingTime, 0, sameEpoch + 1));

        // Can be negative here for cases where remaining amount is 0 but a new epoch has started.
        int newRemainingAmount = int(remainingAmount) - amount;

        if (sameEpoch == 0){
            newRemainingTime = 0; // Direct assignment to 0 saves 1 operation.
            newRemainingAmount = sameMaxAmountPerEpoch;
        } else {
            // This case is valid for the cases where epoch has passed.
            if (passedTime >= newRemainingTime) {  newRemainingAmount = sameMaxAmountPerEpoch - amount; }

            if (newRemainingTime >= (passedTime % sameEpoch)) {
                newRemainingTime = newRemainingTime - (passedTime % sameEpoch);
            } else {
                newRemainingTime = sameEpoch - ((passedTime % sameEpoch) - newRemainingTime);
            }
        }

        if (newRemainingTime == 0) {
            // In case of collision.
            newRemainingTime = sameEpoch;
        }

        require(within(newRemainingAmount, 0, sameMaxAmountPerEpoch + 1));
        // Create a new contract with timelock as the current or provided locktime during contract building.
        // Note that the constructor parameters are added in the reverse order.
        // So validFrom is actually the first statement in the contract bytecode.
        bytes nextState = 0x04 + tx.locktime + 0x04 + bytes4(newRemainingAmount) + 0x04 + bytes4(newRemainingTime) + tx.bytecode.split(15)[1];
    
        // Create a simulated state(Helps in enforcing spendable restrictions) by sending the money to the new contract with same
        // parameters except the timelock/validFrom.
        bytes34 toRecipient = new OutputP2PKH(bytes8(amount), hash160(payeePk));
        bytes32 toContract = new OutputP2SH(bytes8(amountToNextState), hash160(nextState));

        require(hash256(toRecipient + toContract) == tx.hashOutputs);
    }
}